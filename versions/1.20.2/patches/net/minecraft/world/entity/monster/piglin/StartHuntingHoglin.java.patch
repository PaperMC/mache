--- a/net/minecraft/world/entity/monster/piglin/StartHuntingHoglin.java
+++ b/net/minecraft/world/entity/monster/piglin/StartHuntingHoglin.java
@@ -11,7 +11,7 @@
 public class StartHuntingHoglin {
     public static OneShot<Piglin> create() {
         return BehaviorBuilder.create(
-            instance -> instance.<MemoryAccessor, MemoryAccessor, MemoryAccessor, MemoryAccessor>group(
+            instance -> instance.group(
                         instance.present(MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN),
                         instance.absent(MemoryModuleType.ANGRY_AT),
                         instance.absent(MemoryModuleType.HUNTED_RECENTLY),
@@ -21,14 +21,14 @@
                         instance,
                         (nearestVisibleHuntableHoglin, angryAt, huntedRecently, nearestVisibleAdultPiglins) -> (level, piglin, gameTime) -> {
                                 if (!piglin.isBaby()
-                                    && !instance.<List>tryGet(nearestVisibleAdultPiglins)
+                                    && !instance.tryGet(nearestVisibleAdultPiglins)
                                         .map(adultPiglin -> adultPiglin.stream().anyMatch(StartHuntingHoglin::hasHuntedRecently))
                                         .isPresent()) {
                                     Hoglin hoglin = instance.get(nearestVisibleHuntableHoglin);
                                     PiglinAi.setAngerTarget(piglin, hoglin);
                                     PiglinAi.dontKillAnyMoreHoglinsForAWhile(piglin);
                                     PiglinAi.broadcastAngerTarget(piglin, hoglin);
-                                    instance.<List>tryGet(nearestVisibleAdultPiglins)
+                                    instance.tryGet(nearestVisibleAdultPiglins)
                                         .ifPresent(adultPiglin -> adultPiglin.forEach(PiglinAi::dontKillAnyMoreHoglinsForAWhile));
                                     return true;
                                 } else {
