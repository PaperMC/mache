--- a/net/minecraft/util/ExtraCodecs.java
+++ b/net/minecraft/util/ExtraCodecs.java
@@ -215,7 +215,7 @@
                 P p1 = listx.get(1);
                 return combineFunction.apply(p, p1);
             }), pair -> ImmutableList.of(leftFunction.apply(pair), rightFunction.apply(pair)));
-        Codec<I> codec1 = RecordCodecBuilder.<Pair>create(
+        Codec<I> codec1 = RecordCodecBuilder.<Pair<P, P>>create(
                 instance -> instance.group(codec.fieldOf(leftFieldName).forGetter(Pair::getFirst), codec.fieldOf(rightFieldName).forGetter(Pair::getSecond))
                         .apply(instance, Pair::of)
             )
@@ -447,10 +447,10 @@
             string -> {
                 int ix = string.length();
                 if (ix < minLength) {
-                    return DataResult.error(() -> "String \"" + string + "\" is too short: " + i + ", expected range [" + minLength + "-" + maxLength + "]");
+                    return DataResult.error(() -> "String \"" + string + "\" is too short: " + ix + ", expected range [" + minLength + "-" + maxLength + "]");
                 } else {
                     return ix > maxLength
-                        ? DataResult.error(() -> "String \"" + string + "\" is too long: " + i + ", expected range [" + minLength + "-" + maxLength + "]")
+                        ? DataResult.error(() -> "String \"" + string + "\" is too long: " + ix + ", expected range [" + minLength + "-" + maxLength + "]")
                         : DataResult.success(string);
                 }
             }
