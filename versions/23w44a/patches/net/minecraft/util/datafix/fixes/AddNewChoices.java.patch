--- a/net/minecraft/util/datafix/fixes/AddNewChoices.java
+++ b/net/minecraft/util/datafix/fixes/AddNewChoices.java
@@ -5,6 +5,7 @@
 import com.mojang.datafixers.DSL.TypeReference;
 import com.mojang.datafixers.schemas.Schema;
 import com.mojang.datafixers.types.Type;
+import com.mojang.datafixers.types.templates.TaggedChoice;
 import com.mojang.datafixers.types.templates.TaggedChoice.TaggedChoiceType;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.DynamicOps;
@@ -31,8 +32,8 @@
         if (type.getKeyType() != newType.getKeyType()) {
             throw new IllegalStateException("Could not inject: key type is not the same");
         } else {
-            return this.fixTypeEverywhere(name, type, (Type<Pair<K, ?>>)newType, dynamicOps -> pair -> {
-                    if (!newType.hasType(pair.getFirst())) {
+            return this.fixTypeEverywhere(name, type, (TaggedChoice.TaggedChoiceType<K>) newType, dynamicOps -> pair -> {
+                    if (!((TaggedChoice.TaggedChoiceType<K>) newType).hasType(pair.getFirst())) {
                         throw new IllegalArgumentException(String.format(Locale.ROOT, "Unknown type %s in %s ", pair.getFirst(), this.type));
                     } else {
                         return pair;
